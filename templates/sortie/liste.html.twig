{% extends 'base.html.twig' %}

{% block title %}Les Sorties{% endblock %}

{% block body %}
    <div class="container mt-4">
    <h2 class="text-center mb-4">Les Sorties !</h2>

    <label>
        <input type="checkbox" id="filterCheckboxOrganisateur"> Afficher uniquement mes sorties organisées
    </label>
    <br>

    <label>
        <input type="checkbox" id="filterCheckboxInscrit"> Afficher uniquement les sorties auxquelles je suis inscrit
    </label>
    <br>
    <label>
        <input type="checkbox" id="filterCheckboxNonInscrit"> Afficher uniquement les sorties auxquelles je ne suis pas inscrit
    </label>

    <div class="table-responsive">
        <table class="table table-striped table-bordered text-center">
            <thead class="table-dark">
            <tr>
                <th>Nom de la sortie</th>
                <th>Date de la sortie</th>
                <th>Clôture</th>
                <th>Inscrits / Places</th>
                <th>État</th>
                <th>Inscrit</th>
                <th>Organisateur</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>

            {% for sortie in sorties %}
                {% if sortie %}
                    {% if (sortie.etat.libelle == 'Créée' and sortie.organisateur == app.user)
                        or sortie.etat.libelle != 'Archivée' %}
                        <tr class="sortie"
                            data-inscrit="{% if sortie in sortiesInscrit %}1{% else %}0{% endif %}"
                            data-non-inscrit="{% if sortie in sortiesInscrit %}0{% else %}1{% endif %}"
                            data-organisateur="{% if sortie.organisateur == app.user %}1{% else %}0{% endif %}">

                            <td>{{ sortie.nomSortie }} {{ sortie.id }}</td>
                            <td>{{ sortie.dateHeureDebut.format(' d/m/Y à H:i') }}</td>
                            <td>{{ sortie.dateLimiteInscription.format('d/m/Y') }}</td>
                            <td><span class="badge bg-primary"> {{ sortie.participants.count() }} </span> / {{ sortie.nbInscriptionsMax }} </td>

                            <td>
                                {% if sortie.etat.libelle == 'Créée' %}
                                    <span class="badge bg-warning text-white">{{ sortie.etat.libelle }}</span>
                                {% elseif sortie.etat.libelle == 'Ouverte' %}
                                    <span class="badge bg-info text-white">{{ sortie.etat.libelle }}</span>
                                {% elseif sortie.etat.libelle == 'Clôturée' %}
                                    <span class="badge bg-danger text-white">{{ sortie.etat.libelle }}</span>
                                {% else %}
                                    <span class="badge bg-secondary text-grey">{{ sortie.etat.libelle }}</span>
                                {% endif %}

                            </td>
                            <td>
                                {% if sortie.participants.contains(app.user) %}
                                    <span class="badge bg-success">Oui</span>
                                {% endif %}
                            </td>

                            <td>
                                <a type="button" class="btn btn-outline-secondary" href="{{ path('participant_detail', {'id': sortie.organisateur.id}) }}">
                                    {{ sortie.organisateur.pseudo }}
                                </a>
                            </td>

                            <td>
                                <a href='{{ path('sortie_detail', {'id': sortie.id}) }}' class="btn btn-sm btn-outline-primary">Afficher</a>
                                {% if app.user %}
                                    {% if sortie.etat.libelle == 'Ouverte' and sortie.organisateur != app.user %}
                                        {% if sortie.participants.contains(app.user) %}
                                            <a href="{{ path('sortie_desister', {'id': sortie.id}) }}" class="btn btn-sm btn-outline-success">Se désister</a>
                                        {% else %}
                                            <a href="{{ path('sortie_inscrire', {'id': sortie.id}) }}" class="btn btn-sm btn-outline-success">S'inscrire</a>
                                        {% endif %}
                                    {% endif %}
                                    {% if sortie.organisateur == app.user %}
                                        {% if sortie.etat.libelle in ['Ouverte', 'Créée'] %}
                                            <a href="{{ path('sortie_update', {'id': sortie.id}) }}" class="btn btn-sm btn-outline-success">Modifier</a>
                                            <a href="{{ path('sortie_annulation', {'id': sortie.id}) }}" class="btn btn-sm btn-outline-danger">Annuler</a>
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            </td>
                        </tr>

                    {% endif %}
                {% else %}
                    <tr>
                        <td colspan="8" class="text-center text-muted">Pas de sortie dans la base de données</td>
                    </tr>
                {%  endif %}
            {% endfor %}
            </tbody>
        </table>
    </div>



    <script>
        // Fonction pour mettre à jour le data-inscrit
        function updateDataInscrit(sortieId, isInscrit) {
            const sortieRow = document.querySelector(`.sortie[data-id='${sortieId}']`);
            if (sortieRow) {
                sortieRow.dataset.inscrit = isInscrit ? "1" : "0";
            }
        }

        // Exemple d'appel après inscription ou désinscription
        document.querySelectorAll('.btn-inscrire').forEach(btn => {
            btn.addEventListener('click', function (event) {
                const sortieId = this.dataset.sortieId; // ID de la sortie
                // Après avoir inscrit l'utilisateur
                updateDataInscrit(sortieId, true);
                filterSorties(); // Appliquer les filtres après mise à jour
            });
        });

        document.querySelectorAll('.btn-desister').forEach(btn => {
            btn.addEventListener('click', function (event) {
                const sortieId = this.dataset.sortieId; // ID de la sortie
                // Après avoir désinscrit l'utilisateur
                updateDataInscrit(sortieId, false);
                filterSorties(); // Appliquer les filtres après mise à jour
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            // Récupération des checkbox
            const filterCheckboxOrganisateur = document.getElementById("filterCheckboxOrganisateur");
            const filterCheckboxInscrit = document.getElementById("filterCheckboxInscrit");
            const filterCheckboxNonInscrit = document.getElementById("filterCheckboxNonInscrit");

            // Tableau des checkboxes
            const checkboxes = [filterCheckboxOrganisateur, filterCheckboxInscrit, filterCheckboxNonInscrit];

            // Fonction pour filtrer les sorties
            function filterSorties() {
                document.querySelectorAll(".sortie").forEach(sortie => {
                    let isOrganisateur = sortie.dataset.organisateur === "1";
                    let isInscrit = sortie.dataset.inscrit === "1";
                    let isNonInscrit = sortie.dataset.nonInscrit === "1";

                    let show = true;

                    // Appliquer le bon filtre (un seul peut être actif)
                    if (filterCheckboxOrganisateur.checked) {
                        show = isOrganisateur;
                    } else if (filterCheckboxInscrit.checked) {
                        show = isInscrit;
                    } else if (filterCheckboxNonInscrit.checked) {
                        show = isNonInscrit;
                    }

                    // Affichage des sorties
                    sortie.style.display = show ? "" : "none";
                });
            }

            // Fonction pour forcer une seule checkbox cochée à la fois
            function handleCheckboxClick(clickedCheckbox) {
                checkboxes.forEach(checkbox => {
                    if (checkbox !== clickedCheckbox) {
                        checkbox.checked = false; // Décoche les autres
                    }
                });
                filterSorties(); // Appliquer le filtre après changement
            }

            // Événements pour chaque checkbox
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    handleCheckboxClick(this);
                });
            });

            // Exécuter le filtre une première fois
            filterSorties();
        });
    </script>
{% endblock %}